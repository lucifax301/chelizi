<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lili.pay.mapper.dao.UserMoneyDtoMapper">
    <resultMap id="BaseResultMap" type="com.lili.pay.dto.UserMoneyDto">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="userId" property="userid" jdbcType="BIGINT"/>
        <result column="userType" property="usertype" jdbcType="TINYINT"/>
        <result column="operateType" property="operatetype" jdbcType="TINYINT"/>
        <result column="changeValue" property="changevalue" jdbcType="INTEGER"/>
        <result column="operateTime" property="operatetime" jdbcType="TIMESTAMP"/>
        <result column="payWay" property="payway" jdbcType="VARCHAR"/>
        <result column="leftValue" property="leftvalue" jdbcType="INTEGER"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <result column="orderId" property="orderId" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="isEarning" property="isEarning" jdbcType="TINYINT"/>
        <result column="isBalance" property="isBalance" jdbcType="TINYINT"/>
        <result column="tranObject" property="tranObject" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
      id, userId, userType, operateType, changeValue, operateTime, payWay, leftValue, remark, orderId, status, isEarning, isBalance, tranObject
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from t_u_money
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="getUserMoneyDtoByPage" resultMap="BaseResultMap" parameterType="com.lili.pay.wallet.MoneyPage">
        select
        <include refid="Base_Column_List"/>
        from t_u_money
        where userId = #{userId,jdbcType=BIGINT} and userType = #{userType,jdbcType=TINYINT}
        order by operateTime desc
        limit #{index, jdbcType=INTEGER}, #{pageSize, jdbcType=INTEGER}
    </select>
    
    <select id="queryIsExitOrderId"  resultType="java.lang.Integer" parameterType="java.lang.String">
        select count(*) from t_u_money  where orderId = #{orderId,jdbcType=VARCHAR} 
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_u_money
    where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.lili.pay.dto.UserMoneyDto">
    insert into t_u_money (
      id,
      userId,
      userType,
      operateType,
      changeValue,
      operateTime,
      payWay,
      leftValue,
      remark,
      orderId,
      status,
      isEarning,
      isBalance,
      tranObject
      )
    values (
      #{id,jdbcType=INTEGER},
      #{userid,jdbcType=BIGINT},
      #{usertype,jdbcType=TINYINT},
      #{operatetype,jdbcType=TINYINT},
      #{changevalue,jdbcType=INTEGER},
      #{operatetime,jdbcType=TIMESTAMP},
      #{payway,jdbcType=VARCHAR},
      #{leftvalue,jdbcType=INTEGER},
      #{remark,jdbcType=VARCHAR},
      #{orderId, jdbcType=VARCHAR},
      #{status,jdbcType=INTEGER},
      #{isEarning,jdbcType=TINYINT},
      #{isBalance,jdbcType=TINYINT},
      #{tranObject,jdbcType=VARCHAR}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.lili.pay.dto.UserMoneyDto">
        insert into t_u_money
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userid != null">
                userId,
            </if>
            <if test="usertype != null">
                userType,
            </if>
            <if test="operatetype != null">
                operateType,
            </if>
            <if test="changevalue != null">
                changeValue,
            </if>
            <if test="operatetime != null">
                operateTime,
            </if>
            <if test="payway != null">
                payWay,
            </if>
            <if test="leftvalue != null">
                leftValue,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="orderId != null">
                orderId,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="isEarning != null">
                isEarning,
            </if>
            <if test="isBalance != null">
                isBalance,
            </if>
            <if test="tranObject != null">
                tranObject,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userid != null">
                #{userid,jdbcType=BIGINT},
            </if>
            <if test="usertype != null">
                #{usertype,jdbcType=TINYINT},
            </if>
            <if test="operatetype != null">
                #{operatetype,jdbcType=TINYINT},
            </if>
            <if test="changevalue != null">
                #{changevalue,jdbcType=INTEGER},
            </if>
            <if test="operatetime != null">
                #{operatetime,jdbcType=TIMESTAMP},
            </if>
            <if test="payway != null">
                #{payway,jdbcType=VARCHAR},
            </if>
            <if test="leftvalue != null">
                #{leftvalue,jdbcType=INTEGER},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="orderId != null">
                #{orderId,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="isEarning != null">
                #{isEarning,jdbcType=TINYINT},
            </if>
            <if test="isBalance != null">
                #{isBalance,jdbcType=TINYINT},
            </if>
            <if test="tranObject != null">
                #{tranObject,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.lili.pay.dto.UserMoneyDto">
        update t_u_money
        <set>
            <if test="userid != null">
                userId = #{userid,jdbcType=BIGINT},
            </if>
            <if test="usertype != null">
                userType = #{usertype,jdbcType=TINYINT},
            </if>
            <if test="operatetype != null">
                operateType = #{operatetype,jdbcType=TINYINT},
            </if>
            <if test="changevalue != null">
                changeValue = #{changevalue,jdbcType=INTEGER},
            </if>
            <if test="operatetime != null">
                operateTime = #{operatetime,jdbcType=TIMESTAMP},
            </if>
            <if test="payway != null">
                payWay = #{payway,jdbcType=VARCHAR},
            </if>
            <if test="leftvalue != null">
                leftValue = #{leftvalue,jdbcType=INTEGER},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="orderId != null">
                orderId = #{orderId,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="isEarning != null">
                isEarning = #{isEarning,jdbcType=TINYINT},
            </if>
            <if test="isBalance != null">
                isBalance = #{isBalance,jdbcType=TINYINT},
            </if>
            <if test="tranObject != null">
                tranObject = #{tranObject,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.lili.pay.dto.UserMoneyDto">
    update t_u_money
    set
      userId = #{userid,jdbcType=BIGINT},
      userType = #{usertype,jdbcType=TINYINT},
      operateType = #{operatetype,jdbcType=TINYINT},
      changeValue = #{changevalue,jdbcType=INTEGER},
      operateTime = #{operatetime,jdbcType=TIMESTAMP},
      payWay = #{payway,jdbcType=VARCHAR},
      leftValue = #{leftvalue,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      orderId = #{orderId, jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER}
      isEarning = #{isEarning,jdbcType=TINYINT},
      isBalance = #{isBalance,jdbcType=TINYINT},
      tranObject = #{tranObject,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <resultMap id="StudentAccountMap" type="com.lili.student.dto.StudentAccount">
        <result column="studentId" property="studentId" jdbcType="BIGINT"/>
        <result column="money" property="money" jdbcType="INTEGER"/>
        <result column="passwd" property="passwd" jdbcType="VARCHAR"/>
    </resultMap>

    <insert id="insertStudentAccount" parameterType="com.lili.student.dto.StudentAccount">
      insert into t_u_stuaccount
        (
          studentId,
          money,
          passwd
        )
      values
        (
          #{studentId,jdbcType=BIGINT},
          #{money, jdbcType=INTEGER},
          #{passwd, jdbcType=VARCHAR}
        )
    </insert>


    <select id="getStudentMoney" resultMap="StudentAccountMap"
            parameterType="java.lang.Long">
		select
		  studentId,money,passwd
		from t_u_stuaccount
		where studentId = #{studentId,jdbcType=BIGINT}
	</select>

    <update id="updateStudentMoney" parameterType="com.lili.student.dto.StudentAccount">
        update t_u_stuaccount
        <set>
            <if test="studentId != null">
                studentId = #{studentId,jdbcType=BIGINT},
            </if>
            <if test="money != null">
                money = #{money, jdbcType=INTEGER},
            </if>
            <if test="passwd != null">
                passwd = #{passwd, jdbcType=INTEGER},
            </if>
        </set>
        where studentId = #{studentId,jdbcType=BIGINT}
    </update>

    <resultMap id="CoachAccountMap" type="com.lili.coach.dto.CoachAccount">
        <result column="coachId" property="coachId" jdbcType="BIGINT"/>
        <result column="money" property="money" jdbcType="INTEGER"/>
        <result column="performance" property="performance" jdbcType="INTEGER"/>
        <result column="lastPerTime" property="lastPerTime" jdbcType="TIMESTAMP"/>
        <result column="passwd" property="passwd" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="getCoachMoney" resultMap="CoachAccountMap"
            parameterType="java.lang.Long">
		select
		  coachId,money,performance,lastPerTime,passwd
		from t_u_coachaccount
		where coachId = #{coachId,jdbcType=BIGINT}
	</select>

    <update id="updateCoachAccount" parameterType="com.lili.coach.dto.CoachAccount">
        update t_u_coachaccount
        <set>
            <if test="money != null">
                money = #{money,jdbcType=INTEGER},
            </if>
            <if test="performance != null">
                performance = #{performance,jdbcType=INTEGER},
            </if>
            <if test="lastPerTime != null">
                lastPerTime = #{lastPerTime, jdbcType=TIMESTAMP},
            </if>
            <if test="passwd != null">
                passwd = #{passwd, jdbcType=VARCHAR},
            </if>
        </set>
        where coachId = #{coachId,jdbcType=BIGINT}
    </update>

    <insert id="insertCoachAccount" parameterType="com.lili.coach.dto.CoachAccount" useGeneratedKeys="true"
            keyProperty="coachId">
		insert into t_u_coachaccount
		  (
		    coachId,
		    money,
		    performance,
		    lastPerTime,
		    passwd
		  )
		values
		(
		  #{coachId,jdbcType=BIGINT},
		  #{money,jdbcType=INTEGER},
		  #{performance,jdbcType=INTEGER},
		  #{lastPerTime,jdbcType=TIMESTAMP},
		  #{passwd,jdbcType=VARCHAR}
		)
	</insert>
</mapper>