package com.lili.order.service;

import java.util.Date;
import java.util.List;
import java.util.Map;

import com.lili.order.vo.CoachClassPriceVo;
import com.lili.order.vo.CoachClassQuery;
import com.lili.order.vo.CoachClassVo;
import com.lili.order.vo.OrderVo;
import com.lili.student.dto.Student;
import com.lili.student.vo.MycoachesVo;

public interface CoachClassService {

  public void addCoachClass(CoachClassVo coachclassVo)  throws Exception;
  public void addCoachClassList(List<CoachClassVo> coachclassVoList)  throws Exception;
  public void delCoachClassById(Integer ccid)  throws Exception;
  public void delCoachClassByIds(List<Integer> ids)  throws Exception;
  public void delCoachClassByObj(CoachClassVo coachclassVo)  throws Exception;
  public void saveCoachClass(CoachClassVo coachclassVo)  throws Exception;
  public void saveCoachClassList(List<CoachClassVo> coachclassVoList)  throws Exception;
  public int updateByCcid(CoachClassVo coachclassVo,Integer ccid)  throws Exception;
  public int updateByCtype(CoachClassVo coachclassVo,Integer ctype)  throws Exception;
  public int updateByCoachId(CoachClassVo coachclassVo,Long coachId)  throws Exception;
  public int updateByCstart(CoachClassVo coachclassVo,Date cstart)  throws Exception;
  public int updateByCend(CoachClassVo coachclassVo,Date cend)  throws Exception;
  public int updateByRstart(CoachClassVo coachclassVo,Date rstart)  throws Exception;
  public int updateByRend(CoachClassVo coachclassVo,Date rend)  throws Exception;
  public int updateByOrderId(CoachClassVo coachclassVo,String orderId)  throws Exception;
  public int updateByMaxNum(CoachClassVo coachclassVo,Integer maxNum)  throws Exception;
  public int updateByBookNum(CoachClassVo coachclassVo,Integer bookNum)  throws Exception;
  public int updateByCarId(CoachClassVo coachclassVo,Integer carId)  throws Exception;
  public int updateByCourseId(CoachClassVo coachclassVo,String courseId)  throws Exception;
  public int updateByPlaceId(CoachClassVo coachclassVo,Integer placeId)  throws Exception;
  public int updateByPrice(CoachClassVo coachclassVo,Integer price)  throws Exception;
  public int updateByDltype(CoachClassVo coachclassVo,Integer dltype)  throws Exception;
  public int updateByTid(CoachClassVo coachclassVo,Integer tid)  throws Exception;
  public int updateByIsdel(CoachClassVo coachclassVo,Integer isdel)  throws Exception;
  public int updateNotNullByObject(CoachClassVo coachclassVo,CoachClassVo search)  throws Exception;
  public int updateAllByObject(CoachClassVo coachclassVo,CoachClassVo search)  throws Exception;
  public CoachClassVo queryCoachClassById(Integer ccid,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryCoachClassByIds(List<Integer> ids,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByObjectAnd(CoachClassVo coachclassVo,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByObjectOr(CoachClassVo coachclassVo,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByCcid(Integer ccid,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByCtype(Integer ctype,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByCoachId(Long coachId,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByCstart(Date cstart,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByCend(Date cend,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByRstart(Date rstart,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByRend(Date rend,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByOrderId(String orderId,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByMaxNum(Integer maxNum,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByBookNum(Integer bookNum,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByCarId(Integer carId,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByCourseId(String courseId,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByPlaceId(Integer placeId,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByPrice(Integer price,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByDltype(Integer dltype,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByTid(Integer tid,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByIsdel(Integer isdel,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryBetween(CoachClassVo coachclassVo,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryBookClassByCoachDate(String date,Long coachId,Integer isDel,int pageIndex,int pageSize) throws Exception;
  public List<CoachClassVo> queryByNew2(CoachClassVo coachclassVo,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByNew3(CoachClassVo coachclassVo,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByNew4(CoachClassVo coachclassVo,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByNew5(CoachClassVo coachclassVo,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByNew6(CoachClassVo coachclassVo,CoachClassQuery coachclassQuery)  throws Exception;
  public List<CoachClassVo> queryByNew7(CoachClassVo coachclassVo,CoachClassQuery coachclassQuery)  throws Exception;
  public Map<Long,List<CoachClassVo>> queryByCoachDateWitNoPrice(Date date,List<Long> coachIds) throws Exception;
  public Map<Long,List<CoachClassVo>> queryByCoachDate(Date date,List<Long> coachIds,Integer ctype) throws Exception;
  public List<CoachClassVo> queryByCoachDateWithNoPrice(Date date,Long coachId,Integer isDel,Integer ctype,Integer pageIndex,Integer pageSize) throws Exception;
  public CoachClassVo isCoachIdle(List<CoachClassVo> list,Integer exceptCcid,String exceptOrderId,Date start,Date end,Boolean isBook) throws Exception;
  public CoachClassVo isCoachIdle(Long coachId,Integer exceptCcid,String exceptOrderId,Date start,Date end,Boolean isBook) throws Exception;
  public CoachClassVo isCoachIdle(Long coachId,Integer exceptCcid,String exceptOrderId,Date start,Boolean isBook) throws Exception;
  public String arrangeClass(CoachClassVo coachClassVo);
  public List<Map<String,Long>> getCoach5Date(long coachId,Long studentId,int days);
  public OrderVo isStudentIdle(Long studentId,String orderId,Date start,Date end,Boolean isBook) throws Exception;
  public OrderVo isStudentIdle(Long studentId,String orderId,Date rstart,Boolean isBook) throws Exception;
  public List<CoachClassVo> queryByCoachDateAllWithNoPrice(Date date,Long coachId,Integer isDel,Integer ctype,Integer pageIndex,Integer pageSize) throws Exception;
  public List<Map<String,Long>> getCoachsArrange(List<Long> coachIds,Long studentId) throws Exception;
  public List<CoachClassVo> queryByCoachDateLiliAll(Date date, Long coachId, Integer isDel, Integer ctype, Integer pageIndex, Integer pageSize, String v, Student s) throws Exception;
  public List<CoachClassPriceVo> queryCoachPrice(Long coachId, Date date,  String courseId, String colId, String dftype, String ctype, String calId);
  public int queryBookNumByCoachId(Long coachId,CoachClassQuery coachclassQuery) ;
  public Integer queryBookNumByOrderCcId(String orderId, Integer ccid, Integer otype, CoachClassQuery coachclassQuery);
  public Integer queryBookNumByCoachId2(Long coachId, CoachClassQuery coachclassQuery);
  public List<MycoachesVo> getCoachsArrangeWithPrice(List<MycoachesVo> ms,List<Long> coachIds,Long studentId,Date date,String courseId) throws Exception;
  public List<CoachClassVo> fillPlantData(List<CoachClassVo> list) throws Exception;
  public Map<Long,List<CoachClassVo>> queryByCoachDateWithPrice(Date date,List<Long> coachIds) throws Exception;
  public Map<Long,List<CoachClassVo>> queryByCoachDateWithPriceOrNot(Date date,List<Long> coachIds) throws Exception;
  public Map<Long,List<CoachClassVo>> queryByCoachDateWithPrice(Date date,Date endDate,List<Long> coachIds) throws Exception;
  public Map<Long,List<CoachClassVo>> queryByCoachDateWithPrice(Date date,List<Long> coachIds,Integer ctype) throws Exception;
}
