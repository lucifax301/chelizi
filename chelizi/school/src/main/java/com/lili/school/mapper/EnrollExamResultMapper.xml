<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lili.school.mapper.EnrollExamResultMapper" >
  <resultMap id="BaseResultMap" type="com.lili.school.dto.EnrollExamResult" >
    <id column="tableNo" property="tableNo" jdbcType="VARCHAR" />
    <id column="flowNo" property="flowNo" jdbcType="BIGINT" />
    <result column="schoolId" property="schoolId" jdbcType="INTEGER" />
    <result column="studentId" property="studentId" jdbcType="BIGINT" />
    <result column="idNumber" property="idNumber" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="schoolName" property="schoolName" jdbcType="VARCHAR" />
    <result column="examDate" property="examDate" jdbcType="TIMESTAMP" />
    <result column="score" property="score" jdbcType="INTEGER" />
    <result column="applystate" property="applystate" jdbcType="INTEGER" />
    <result column="importState" property="importState" jdbcType="INTEGER" />
    <result column="subjectId" property="subjectId" jdbcType="INTEGER" />
    <result column="isdel" property="isdel" jdbcType="TINYINT" />
    <result column="ctime" property="ctime" jdbcType="TIMESTAMP" />
    <result column="mtime" property="mtime" jdbcType="TIMESTAMP" />
    <result column="extra" property="extra" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    tableNo, flowNo, schoolId, studentId, idNumber, name, schoolName, examDate, score, 
    applystate, importState, subjectId, isdel, ctime, mtime, extra
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lili.school.dto.EnrollExamResultExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from t_enroll_exam_result
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.lili.school.dto.EnrollExamResultKey" >
    select 
    <include refid="Base_Column_List" />
    from t_enroll_exam_result
    where tableNo = #{tableNo,jdbcType=VARCHAR}
      and flowNo = #{flowNo,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.lili.school.dto.EnrollExamResultKey" >
    delete from t_enroll_exam_result
    where tableNo = #{tableNo,jdbcType=VARCHAR}
      and flowNo = #{flowNo,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.lili.school.dto.EnrollExamResultExample" >
    delete from t_enroll_exam_result
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lili.school.dto.EnrollExamResult" >
    insert into t_enroll_exam_result (tableNo, flowNo, schoolId, 
      studentId, idNumber, name, 
      schoolName, examDate, score, 
      applystate, importState, subjectId, 
      isdel, ctime, mtime, 
      extra)
    values (#{tableNo,jdbcType=VARCHAR}, #{flowNo,jdbcType=BIGINT}, #{schoolId,jdbcType=INTEGER}, 
      #{studentId,jdbcType=BIGINT}, #{idNumber,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{schoolName,jdbcType=VARCHAR}, #{examDate,jdbcType=TIMESTAMP}, #{score,jdbcType=INTEGER}, 
      #{applystate,jdbcType=INTEGER}, #{importState,jdbcType=INTEGER}, #{subjectId,jdbcType=INTEGER}, 
      #{isdel,jdbcType=TINYINT}, #{ctime,jdbcType=TIMESTAMP}, #{mtime,jdbcType=TIMESTAMP}, 
      #{extra,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.lili.school.dto.EnrollExamResult" >
    insert into t_enroll_exam_result
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="tableNo != null" >
        tableNo,
      </if>
      <if test="flowNo != null" >
        flowNo,
      </if>
      <if test="schoolId != null" >
        schoolId,
      </if>
      <if test="studentId != null" >
        studentId,
      </if>
      <if test="idNumber != null" >
        idNumber,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="schoolName != null" >
        schoolName,
      </if>
      <if test="examDate != null" >
        examDate,
      </if>
      <if test="score != null" >
        score,
      </if>
      <if test="applystate != null" >
        applystate,
      </if>
      <if test="importState != null" >
        importState,
      </if>
      <if test="subjectId != null" >
        subjectId,
      </if>
      <if test="isdel != null" >
        isdel,
      </if>
      <if test="ctime != null" >
        ctime,
      </if>
      <if test="mtime != null" >
        mtime,
      </if>
      <if test="extra != null" >
        extra,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="tableNo != null" >
        #{tableNo,jdbcType=VARCHAR},
      </if>
      <if test="flowNo != null" >
        #{flowNo,jdbcType=BIGINT},
      </if>
      <if test="schoolId != null" >
        #{schoolId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null" >
        #{studentId,jdbcType=BIGINT},
      </if>
      <if test="idNumber != null" >
        #{idNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="schoolName != null" >
        #{schoolName,jdbcType=VARCHAR},
      </if>
      <if test="examDate != null" >
        #{examDate,jdbcType=TIMESTAMP},
      </if>
      <if test="score != null" >
        #{score,jdbcType=INTEGER},
      </if>
      <if test="applystate != null" >
        #{applystate,jdbcType=INTEGER},
      </if>
      <if test="importState != null" >
        #{importState,jdbcType=INTEGER},
      </if>
      <if test="subjectId != null" >
        #{subjectId,jdbcType=INTEGER},
      </if>
      <if test="isdel != null" >
        #{isdel,jdbcType=TINYINT},
      </if>
      <if test="ctime != null" >
        #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="mtime != null" >
        #{mtime,jdbcType=TIMESTAMP},
      </if>
      <if test="extra != null" >
        #{extra,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lili.school.dto.EnrollExamResultExample" resultType="java.lang.Integer" >
    select count(*) from t_enroll_exam_result
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_enroll_exam_result
    <set >
      <if test="record.tableNo != null" >
        tableNo = #{record.tableNo,jdbcType=VARCHAR},
      </if>
      <if test="record.flowNo != null" >
        flowNo = #{record.flowNo,jdbcType=BIGINT},
      </if>
      <if test="record.schoolId != null" >
        schoolId = #{record.schoolId,jdbcType=INTEGER},
      </if>
      <if test="record.studentId != null" >
        studentId = #{record.studentId,jdbcType=BIGINT},
      </if>
      <if test="record.idNumber != null" >
        idNumber = #{record.idNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.schoolName != null" >
        schoolName = #{record.schoolName,jdbcType=VARCHAR},
      </if>
      <if test="record.examDate != null" >
        examDate = #{record.examDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.score != null" >
        score = #{record.score,jdbcType=INTEGER},
      </if>
      <if test="record.applystate != null" >
        applystate = #{record.applystate,jdbcType=INTEGER},
      </if>
      <if test="record.importState != null" >
        importState = #{record.importState,jdbcType=INTEGER},
      </if>
      <if test="record.subjectId != null" >
        subjectId = #{record.subjectId,jdbcType=INTEGER},
      </if>
      <if test="record.isdel != null" >
        isdel = #{record.isdel,jdbcType=TINYINT},
      </if>
      <if test="record.ctime != null" >
        ctime = #{record.ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.mtime != null" >
        mtime = #{record.mtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.extra != null" >
        extra = #{record.extra,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_enroll_exam_result
    set tableNo = #{record.tableNo,jdbcType=VARCHAR},
      flowNo = #{record.flowNo,jdbcType=BIGINT},
      schoolId = #{record.schoolId,jdbcType=INTEGER},
      studentId = #{record.studentId,jdbcType=BIGINT},
      idNumber = #{record.idNumber,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      schoolName = #{record.schoolName,jdbcType=VARCHAR},
      examDate = #{record.examDate,jdbcType=TIMESTAMP},
      score = #{record.score,jdbcType=INTEGER},
      applystate = #{record.applystate,jdbcType=INTEGER},
      importState = #{record.importState,jdbcType=INTEGER},
      subjectId = #{record.subjectId,jdbcType=INTEGER},
      isdel = #{record.isdel,jdbcType=TINYINT},
      ctime = #{record.ctime,jdbcType=TIMESTAMP},
      mtime = #{record.mtime,jdbcType=TIMESTAMP},
      extra = #{record.extra,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lili.school.dto.EnrollExamResult" >
    update t_enroll_exam_result
    <set >
      <if test="schoolId != null" >
        schoolId = #{schoolId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null" >
        studentId = #{studentId,jdbcType=BIGINT},
      </if>
      <if test="idNumber != null" >
        idNumber = #{idNumber,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="schoolName != null" >
        schoolName = #{schoolName,jdbcType=VARCHAR},
      </if>
      <if test="examDate != null" >
        examDate = #{examDate,jdbcType=TIMESTAMP},
      </if>
      <if test="score != null" >
        score = #{score,jdbcType=INTEGER},
      </if>
      <if test="applystate != null" >
        applystate = #{applystate,jdbcType=INTEGER},
      </if>
      <if test="importState != null" >
        importState = #{importState,jdbcType=INTEGER},
      </if>
      <if test="subjectId != null" >
        subjectId = #{subjectId,jdbcType=INTEGER},
      </if>
      <if test="isdel != null" >
        isdel = #{isdel,jdbcType=TINYINT},
      </if>
      <if test="ctime != null" >
        ctime = #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="mtime != null" >
        mtime = #{mtime,jdbcType=TIMESTAMP},
      </if>
      <if test="extra != null" >
        extra = #{extra,jdbcType=VARCHAR},
      </if>
    </set>
    where tableNo = #{tableNo,jdbcType=VARCHAR}
      and flowNo = #{flowNo,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lili.school.dto.EnrollExamResult" >
    update t_enroll_exam_result
    set schoolId = #{schoolId,jdbcType=INTEGER},
      studentId = #{studentId,jdbcType=BIGINT},
      idNumber = #{idNumber,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      schoolName = #{schoolName,jdbcType=VARCHAR},
      examDate = #{examDate,jdbcType=TIMESTAMP},
      score = #{score,jdbcType=INTEGER},
      applystate = #{applystate,jdbcType=INTEGER},
      importState = #{importState,jdbcType=INTEGER},
      subjectId = #{subjectId,jdbcType=INTEGER},
      isdel = #{isdel,jdbcType=TINYINT},
      ctime = #{ctime,jdbcType=TIMESTAMP},
      mtime = #{mtime,jdbcType=TIMESTAMP},
      extra = #{extra,jdbcType=VARCHAR}
    where tableNo = #{tableNo,jdbcType=VARCHAR}
      and flowNo = #{flowNo,jdbcType=BIGINT}
  </update>
  <select resultMap="BaseResultMap" parameterType="com.lili.school.dto.EnrollExamResultExample" id="selectByExampleWithRowbounds" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from t_enroll_exam_result
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
</mapper>