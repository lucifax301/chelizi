<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lili.school.mapper.dao.SchAccountMapper">
	<resultMap id="BaseResultMap" type="com.lili.school.model.SchAccount">
		<result column="schoolId" property="schoolId" jdbcType="INTEGER" />
		<result column="money" property="money" jdbcType="INTEGER" />
		<result column="passwd" property="passwd" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="Base_Column_List">
		schoolId, money, passwd,mobile
	</sql>
	
	 <select id="queryAccount" resultMap="BaseResultMap" parameterType="com.lili.school.model.SchAccount" >
	    select 
		    	<include refid="Base_Column_List" />
	   	 from t_s_schaccount
	    	where schoolId = #{schoolId,jdbcType=INTEGER}  and passwd = #{passwd,jdbcType=VARCHAR}
  </select>
  
  <select id="querySchoolMoney" resultType="java.lang.Long" parameterType="com.lili.school.model.SchAccount" >
	    	select    <![CDATA[ ifnull(sum(money),0)]]>  	 from t_s_schaccount where schoolId != 0
  </select>
  
 <select id="queryLiliWalletMoney"  resultType="java.lang.Long" parameterType="com.lili.school.model.SchAccount" >
	    	select    <![CDATA[ ifnull(sum(money),0)]]>  	 from t_s_schaccount where schoolId= 0
  </select>

	<select id="queryBySchoolId" resultMap="BaseResultMap"
		parameterType="com.lili.school.model.SchAccount">
		select
		<include refid="Base_Column_List" />
		from t_s_schaccount
		where schoolId = #{schoolId,jdbcType=INTEGER}
	</select>

	<select id="queryByPasswd" resultMap="BaseResultMap"
		parameterType="com.lili.school.model.SchAccount">
		select
		<include refid="Base_Column_List" />
		from t_s_schaccount
		where schoolId = #{schoolId,jdbcType=INTEGER} and passwd =
		#{passwd,jdbcType=VARCHAR}
	</select>

	<insert id="insert" parameterType="com.lili.school.model.SchAccount">
		insert into t_s_schaccount ( schoolId, money, passwd, mobile )
		values ( #{schoolid,jdbcType=INTEGER}, #{money,jdbcType=INTEGER},
		#{passwd,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR} )
	</insert>

	<insert id="insertSelective" parameterType="com.lili.school.model.SchAccount">
		insert into t_s_schaccount
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="schoolId != null">
				schoolId,
			</if>
			<if test="money != null">
				money,
			</if>
			<if test="passwd != null">
				passwd,
			</if>
			<if test="mobile != null">
				mobile,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="schoolId != null">
				#{schoolId,jdbcType=INTEGER},
			</if>
			<if test="money != null">
				#{money,jdbcType=INTEGER},
			</if>
			<if test="passwd != null">
				#{passwd,jdbcType=VARCHAR},
			</if>
			<if test="mobile != null">
				#{mobile,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>

	<update id="updateSchoolAccount" parameterType="com.lili.school.model.SchAccount">
		update t_s_schaccount
		<set>
			<if test="money != null">
				money = #{money,jdbcType=INTEGER},
			</if>
		</set>
		where schoolId = #{schoolId,jdbcType=INTEGER}
	</update>

	<update id="updatePasswd" parameterType="com.lili.school.model.SchAccount">
		update t_s_schaccount
		<set>
			<if test="passwd != null">
				passwd = #{passwd,jdbcType=VARCHAR},
			</if>
		</set>
		where schoolId = #{schoolId,jdbcType=INTEGER} 
	</update>
	
	<update id="updateMobile" parameterType="com.lili.school.model.SchAccount">
		update t_s_schaccount
		<set>
			<if test="mobile != null">
				mobile = #{mobile,jdbcType=VARCHAR},
			</if>
		</set>
		where schoolId = #{schoolId,jdbcType=INTEGER} 
	</update>

	<update id="updateByPrimaryKeySelective" parameterType="com.lili.school.model.SchAccount">
		update t_s_schaccount
		<set>
			<if test="schoolId != null">
				schoolId = #{schoolId,jdbcType=INTEGER},
			</if>
			<if test="money != null">
				money = #{money,jdbcType=INTEGER},
			</if>
			<if test="passwd != null">
				passwd = #{passwd,jdbcType=VARCHAR},
			</if>
			<if test="mobile != null">
				mobile = #{mobile,jdbcType=VARCHAR},
			</if>
		</set>
		where schoolId = #{schoolId,jdbcType=INTEGER}
	</update>
	
	<update id="addMoneyBack" parameterType="map">
		update t_s_schaccount
		<set >
		      <if test="money != null" >
		        money = #{money,jdbcType=INTEGER}
		      </if>
    	</set>
    	where schoolId = #{schoolId,jdbcType=INTEGER}
	</update>

	<update id="updateByPrimaryKey" parameterType="com.lili.school.model.SchAccount">
		update t_s_schaccount
		set schoolId = #{schoolId,jdbcType=INTEGER},
		money = #{money,jdbcType=INTEGER},
		passwd = #{passwd,jdbcType=VARCHAR},
		mobile = #{mobile,jdbcType=VARCHAR},
		where schoolId = #{schoolId,jdbcType=INTEGER}
	</update>
</mapper>