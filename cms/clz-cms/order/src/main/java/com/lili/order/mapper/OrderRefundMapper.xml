<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lili.order.mapper.dao.OrderRefundDao">
	<resultMap id="BaseResultMap" type="com.lili.order.vo.OrderRefundVo">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="order_id" property="orderId" jdbcType="VARCHAR" />
		<result column="asker" property="asker" jdbcType="VARCHAR" />
		<result column="operator" property="operator" jdbcType="VARCHAR" />
		<result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
		<result column="refundMoney" property="refundMoney" jdbcType="INTEGER" />
		<result column="status" property="status" jdbcType="TINYINT" />
		<result column="refundTime" property="refundTime" jdbcType="TIMESTAMP" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
	</resultMap>
	
	<sql id="Base_Column_List">
		id, order_id, asker, operator, createTime, refundMoney, status,
		refundTime, remark
	</sql>
	
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from t_order_refund
		where id = #{id,jdbcType=INTEGER}
	</select>
	
	<select id="queryIsUnHandleList"  resultType="java.lang.Integer" parameterType="java.lang.String">
		select
			count(1)
		from t_order_refund
		where status=1
			<trim suffixOverrides=",">
				<if test="_parameter != null and _parameter != ''">
					and order_id in (#{_parameter})
				</if>
				<if test="_parameter == null or _parameter == ''">
					and order_id in ('')
				</if>
			</trim>
	</select>
	
	<resultMap id="RefundResultMap" type="com.lili.order.vo.OrderRefundVo">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="order_id" property="orderId" jdbcType="VARCHAR" />
		<result column="asker" property="asker" jdbcType="VARCHAR" />
		<result column="operator" property="operator" jdbcType="VARCHAR" />
		<result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
		<result column="refundMoney" property="refundMoney" jdbcType="INTEGER" />
		<result column="status" property="status" jdbcType="TINYINT" />
		<result column="refundTime" property="refundTime" jdbcType="TIMESTAMP" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="price" property="price" jdbcType="INTEGER" />
		<result column="pay_total" property="payTotal" jdbcType="INTEGER" />
		<result column="studentId" property="studentId" jdbcType="INTEGER" />
		<result column="payWay" property="payWay" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="phoneNum" property="phoneNum" jdbcType="VARCHAR" />
	</resultMap>
	
	<select id="queryOrderRefundList" parameterType="com.lili.order.vo.OrderRefundVo" resultMap="RefundResultMap" >
		select
			r.id, r.order_id, r.asker, r.operator, r.createTime, r.refundMoney, r.status, r.refundTime, r.remark,
			o.price,o.pay_total,
			(select m.payWay from t_u_money m where m.orderId = r.order_id and m.operateType=5) as payWay,
			(select  s.name from t_u_student s where s.studentId =o.student_id limit 1) as name,
			(select  s.studentId from t_u_student s where s.studentId =o.student_id limit 1) as studentId,
			(select  s.phoneNum from t_u_student s where s.studentId =o.student_id limit 1) as phoneNum
		from t_order_refund r, t_order o
			where r.order_id = o.order_id
			<trim suffixOverrides=",">
				<if test="orderId != null and orderId != ''">
					and r.order_id = #{orderId}
				</if>
				<if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
						 and date(r.createTime)  between #{startTime} and #{endTime}
				</if>	
				<if test="status != null and status != '' or status==0">
					and r.status = #{status}
				</if>
			</trim>
			order by createTime desc
	</select>
	
	
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from t_order_refund
		where id = #{id,jdbcType=INTEGER}
	</delete>
	
	<insert id="insert" parameterType="com.lili.order.vo.OrderRefundVo">
		insert into t_order_refund (id, order_id, asker,
		operator, createTime, refundMoney,
		status, refundTime, remark
		)
		values (#{id,jdbcType=INTEGER}, #{orderId,jdbcType=VARCHAR},
		#{asker,jdbcType=VARCHAR},
		#{operator,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{refundMoney,jdbcType=INTEGER},
		#{status,jdbcType=TINYINT}, #{refundTime,jdbcType=TIMESTAMP},
		#{remark,jdbcType=VARCHAR}
		)
	</insert>
	
	<insert id="insertSelective" parameterType="com.lili.order.vo.OrderRefundVo">
		insert into t_order_refund
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="orderId != null">
				order_id,
			</if>
			<if test="asker != null">
				asker,
			</if>
			<if test="operator != null">
				operator,
			</if>
			<if test="createTime != null">
				createTime,
			</if>
			<if test="refundMoney != null">
				refundMoney,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="refundTime != null">
				refundTime,
			</if>
			<if test="remark != null">
				remark,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="orderId != null">
				#{orderId,jdbcType=VARCHAR},
			</if>
			<if test="asker != null">
				#{asker,jdbcType=VARCHAR},
			</if>
			<if test="operator != null">
				#{operator,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="refundMoney != null">
				#{refundMoney,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				#{status,jdbcType=TINYINT},
			</if>
			<if test="refundTime != null">
				#{refundTime,jdbcType=TIMESTAMP},
			</if>
			<if test="remark != null">
				#{remark,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	
	<update id="updateByPrimaryKeySelective" parameterType="com.lili.order.vo.OrderRefundVo">
		update t_order_refund
		<set>
			<if test="orderId != null">
				order_id = #{orderId,jdbcType=VARCHAR},
			</if>
			<if test="asker != null">
				asker = #{asker,jdbcType=VARCHAR},
			</if>
			<if test="operator != null">
				operator = #{operator,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				createTime = #{createTime,jdbcType=TIMESTAMP},
			</if>
			<if test="refundMoney != null">
				refundMoney = #{refundMoney,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=TINYINT},
			</if>
			<if test="refundTime != null">
				refundTime = #{refundTime,jdbcType=TIMESTAMP},
			</if>
			<if test="remark != null">
				remark = #{remark,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	
	<update id="updateByPrimaryKey" parameterType="com.lili.order.vo.OrderRefundVo">
		update t_order_refund
		set order_id = #{orderId,jdbcType=VARCHAR},
		asker = #{asker,jdbcType=VARCHAR},
		operator = #{operator,jdbcType=VARCHAR},
		createTime = #{createTime,jdbcType=TIMESTAMP},
		refundMoney = #{refundMoney,jdbcType=INTEGER},
		status = #{status,jdbcType=TINYINT},
		refundTime = #{refundTime,jdbcType=TIMESTAMP},
		remark = #{remark,jdbcType=VARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<select id="selectByOrderId" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from t_order_refund
		where order_id = #{orderId,jdbcType=INTEGER}
	</select>
</mapper>